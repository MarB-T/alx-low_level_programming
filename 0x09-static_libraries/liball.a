!<arch>
0-isupper.c/    0           0     0     644     242       `
#include "main.h"
#include <stdio.h>

/**
 * _isupper - function that check upper case characters
 * @c: Character to check
 * Return: 1 or 0
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     318       `
#include "main.h"

/**
 * _memset - Function  to fill memory with a constant byte
 * @s: Starting address
 * @b: The byte to fill with
 * @n: Number of bytes
 * Return: s (start address)
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		s[i] = b;
		i++;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     360       `
#include "main.h"

/**
 * _strcat - Function to concatenate two strings
 * @dest: First string
 * @src: Second string
 * Return: char pointer
 */

char *_strcat(char *dest, char *src)
{
	int index = 0;
	int dest_len = 0;

	while (dest[index++])
	{
		dest_len++;
	}
	for (index = 0; src[index]; index++)
	{
		dest[dest_len++] = src[index];
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     508       `
#include "main.h"
#include <stdio.h>

/**
 * _atoi - Converts string to integer
 * @s: the string in question
 * Return: integer
 */

int _atoi(char *s)
{
	unsigned int result = 0;
	int sign = 1;
	int i = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
		{
			sign *= -1;
		}
		if (s[i] == '+')
		{
			sign *= 1;
		}
		if (s[i] >= '0' && s[i] <= '9')
		{
			result = result * 10 + s[i] - '0';
		}
		if ((result > 1) && !(s[i] >= '0' && s[i] <= '9'))
		{
			break;
		}
	}
	return (result * sign);
}
1-isdigit.c/    0           0     0     644     228       `
#include "main.h"
#include <stdio.h>

/**
 * _isdigit - Function to check if digit
 * @c: character to check
 * Return: 1 and 0
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     342       `
#include "main.h"

/**
 * _memcpy - Copies memory area
 * @dest: Destination of the copying
 * @src: Memory area to be copied
 * @n: Number of bytes to copy
 * Return: Address copied to ie dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		dest[i] = src[i];
		i++;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     429       `
#include "main.h"

/**
 * _strncat - Function to concatenate two strings with a limit
 * @dest: First string
 * @src: Second string
 * @n: max limit of src to append
 * Return: char pointer
 */

char *_strncat(char *dest, char *src, int n)
{
	int index = 0;
	int dest_len = 0;

	while (dest[index++])
	{
		dest_len++;
	}
	for (index = 0; src[index] && index < n; index++)
	{
		dest[dest_len++] = src[index];
	}
	return (dest);
}

2-strchr.c/     0           0     0     644     333       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr - Finds the location of the first character in a string
 * @s: The string in question
 * @c: The character to locate
 * Return: address of first instance of (c)
 */

char *_strchr(char *s, char c)
{
	while (*s != '\n')
	{
		if (*s == c)
			return (s);
		s++;
	}
	return (NULL);
}

2-strlen.c/     0           0     0     644     267       `
#include "main.h"
#include <string.h>
#include <stdio.h>

/**
 * _strlen - determine length of a string
 * @s: String whose length to find
 * Return: string lenght
 */

int _strlen(char *s)
{
	int len = 0;

	while (*s != '\0')
	{
		len++;
		s++;
	}
	return (len);

}

2-strncpy.c/    0           0     0     644     339       `
#include "main.h"
/**
 * _strncpy - copies a string
 * @dest: destination.
 * @src: source.
 * @n: amount of bytes from src.
 * Return: the pointer to dest.
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	for ( ; i < n; i++)
		dest[i] = '\0';

	return (dest);
}

3-islower.c/    0           0     0     644     236       `
#include "main.h"

/**
 * _islower - Checks if a Char is lowercase
 * Return: 0
 * @c: char to be checked
 */

/* c - takes int argument */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     204       `
#include "main.h"

/**
 * _puts - Prints a string followed by new line
 * @str: string to be printed
 */

void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		++str;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     252       `
#include "main.h"

/**
 * _strcmp - Compares two strings
 * @s1: string 1
 * @s2: string 2
 * Return: their difference 0 if same
 */

int _strcmp(char *s1, char *s2)
{
	while ((*s1 && *s2) && (*s1 == *s2))
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     505       `
#include "main.h"
#include <stdio.h>

/**
 * _strspn - Finds the length of a prefix substring
 * @s: The main string
 * @accept: The subxtring
 * Return: Length of s containing accept
 */

unsigned int _strspn(char *s, char *accept)
{
	size_t count = 0;
	int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		int match = 0;

		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				match = 1;
				break;
			}
		}
		if (match == 0)
		{
			return (count);
		}
		count++;
	}
	return (count);
}

4-isalpha.c/    0           0     0     644     239       `
#include "main.h"

/**
 * _isalpha - Checks if a char is alphabetic
 * Return: 0
 * @c: character to be checked
 */

int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

4-strpbrk.c/    0           0     0     644     426       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - find the first occurence of any of a set of bytes in a string.
 * @s: The string in question
 * @accept: char-set to check for
 * Return: pointer to the first occurence
 */

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s != '\0')
	{
		for (i = 0; accept[i] != '\0'; i++)
		{
			if (*s == accept[i])
			{
				return (s);
			}
		}
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     714       `
#include "main.h"
#include <stdio.h>

/**
 * _strstr - Locates substring in a string
 * @haystack: the hey stack
 * @needle: the needle to find
 * Return: pointer or NULL
 */

char *_strstr(char *haystack, char *needle)
{

	int len1 = 0, i;
	int len2 = 0, j;

	while (*haystack != '\0')
	{
		len1++;
		haystack++;
	}
	while (*needle != '\0')
	{
		len2++;
		needle++;
	}
	haystack -= len1;
	needle -= len2;
	if (len2 == 0)
	{
		return (haystack);
	}
	for (i = 0; i < len1; i++)
	{
		if (haystack[i] == needle[0])
		{
			for (j = 1; j < len2 && i + j < len1; j++)
			{
				if (haystack[i + j] != needle[j])
				{
					break;
				}
			}
			if (j == len2)
			{
				return (&haystack[i]);
			}
		}
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     195       `
#include "main.h"

/**
 * _abs - Finds the absolute value of an integer
 * @i: given number
 * Return: int
 */

int _abs(int i)
{
	if (i < 0)
	{
		return (i * -1);
	}
	else
	{
		return (i);
	}
}

9-strcpy.c/     0           0     0     644     361       `
#include "main.h"
#include <stdio.h>

/**
 * *_strcpy - Copies a string including the termination character
 * @dest: Destination of string
 * @src: Source of the string
 * Return: string
 */

char *_strcpy(char *dest, char *src)
{
	char *dest_start = dest;

	while (*src != '\0')
	{
		*dest = *src;
		src++;
		dest++;
	}
	*dest = '\0';
	return (dest_start);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

